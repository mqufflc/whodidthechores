// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chores.sql

package postgres

import (
	"context"
)

const createChore = `-- name: CreateChore :one
INSERT INTO chores (
    name, description, default_duration_mn
) VALUES (
    $1, $2, $3
)
RETURNING id, name, description, default_duration_mn
`

type CreateChoreParams struct {
	Name              string
	Description       string
	DefaultDurationMn int32
}

func (q *Queries) CreateChore(ctx context.Context, arg CreateChoreParams) (Chore, error) {
	row := q.db.QueryRow(ctx, createChore, arg.Name, arg.Description, arg.DefaultDurationMn)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultDurationMn,
	)
	return i, err
}

const deleteChore = `-- name: DeleteChore :exec
DELETE FROM chores
WHERE id = $1
`

func (q *Queries) DeleteChore(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteChore, id)
	return err
}

const getChore = `-- name: GetChore :one
SELECT id, name, description, default_duration_mn FROM chores
WHERE id = $1
`

func (q *Queries) GetChore(ctx context.Context, id int32) (Chore, error) {
	row := q.db.QueryRow(ctx, getChore, id)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultDurationMn,
	)
	return i, err
}

const listChores = `-- name: ListChores :many
SELECT id, name, description, default_duration_mn FROM chores
ORDER BY id
`

func (q *Queries) ListChores(ctx context.Context) ([]Chore, error) {
	rows, err := q.db.Query(ctx, listChores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chore
	for rows.Next() {
		var i Chore
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DefaultDurationMn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChore = `-- name: UpdateChore :one
UPDATE chores SET 
name = $2,
description = $3,
default_duration_mn = $4
WHERE id = $1
RETURNING id, name, description, default_duration_mn
`

type UpdateChoreParams struct {
	ID                int32
	Name              string
	Description       string
	DefaultDurationMn int32
}

func (q *Queries) UpdateChore(ctx context.Context, arg UpdateChoreParams) (Chore, error) {
	row := q.db.QueryRow(ctx, updateChore,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.DefaultDurationMn,
	)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultDurationMn,
	)
	return i, err
}
